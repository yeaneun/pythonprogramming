{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7774ce82-4694-4940-9d1d-1ff838ed098d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "날씨가 좋군!\n"
     ]
    }
   ],
   "source": [
    "#118\n",
    "weather = '화창'\n",
    "if weather == '화창':\n",
    "    print('날씨가 좋군!')\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3326b6c-1820-41da-b38b-1c9a32dd099c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KF 마스크를 꼭 착용합시다\n"
     ]
    }
   ],
   "source": [
    "PM =90\n",
    "\n",
    "if PM > 81 :\n",
    "    print('KF 마스크를 꼭 착용합시다')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "461b915c-e3a7-4486-b3df-8ee04b39a8fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "탑승 가능\n"
     ]
    }
   ],
   "source": [
    "height = 152\n",
    "\n",
    "if height >= 140:#if 140 <= height\n",
    "    print('탑승 가능')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22443573-87ad-4a77-aa67-855777c9db5f",
   "metadata": {},
   "outputs": [],
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f4bc5cfc-8892-45f5-a8f4-eda338e58313",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "시간을 입력하세요 예: 9:30 11:40\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "일반 영화입니다.\n"
     ]
    }
   ],
   "source": [
    "input_time = input('시간을 입력하세요 예: 9:30')\n",
    "\n",
    "#hour = int(input_time[:2])\n",
    "hour = int(input_time.split(':')[0])\n",
    "if hour < 10:\n",
    "    print('조조할인 영화입니다')\n",
    "else:\n",
    "    print('일반 영화입니다.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a068dcc-8d24-481f-9db2-29974b677518",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "숫자를 입력하세요: 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10은 짝수입니다\n"
     ]
    }
   ],
   "source": [
    "n =int(input('숫자를 입력하세요:'))\n",
    "\n",
    "if n%2 == 0:\n",
    "    print(f'{n}은 짝수입니다')\n",
    "else:\n",
    "    print(f'{n}은 홀수입니다') #print('{}은 홀수입니다'.format(n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f60c86e1-0414-4530-b2c7-bc561e9990ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B\n"
     ]
    }
   ],
   "source": [
    "point = 85\n",
    "\n",
    "if point >= 90:\n",
    "    print('A')\n",
    "elif point >= 80:  # 90 > point and point >= 80 앞에있는 조건이 자동적으로 적용\n",
    "    print('B')\n",
    "elif point >= 70:\n",
    "    print('C')\n",
    "else:\n",
    "    print('ㅜㅜ')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5b69ab43-e11d-46cd-988c-4d567edf37bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "원하는 음료는? 1. 커피 2.주스: 1\n",
      "1.아메리카노, 2.카페라테, 3. 에스프레소 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "카페라테를 선택하셨습니다.\n"
     ]
    }
   ],
   "source": [
    "category = int(input('원하는 음료는? 1. 커피 2.주스:'))\n",
    "\n",
    "\n",
    "if category == 1:\n",
    "    menu = int(input('1.아메리카노, 2.카페라테, 3. 에스프레소'))\n",
    "    if menu == 1:\n",
    "        print('아메리카노를 선택하셨습니다.')\n",
    "    elif menu == 2:\n",
    "        print('카페라테를 선택하셨습니다.')\n",
    "    elif menu ==3:\n",
    "        print('에스프레소를 선택하셨습니다.')\n",
    "    else:\n",
    "        print('잘못 선택하셨습니다.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "69795228-9633-4d9c-b0d6-97329ce91626",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for i in range(10): #0~9\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3b06ad6c-1586-406e-b6d2-264f690f1e98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "반복하고싶어 0\n",
      "반복하고싶어 1\n",
      "반복하고싶어 2\n",
      "반복하고싶어 3\n",
      "반복하고싶어 4\n",
      "반복하고싶어 5\n",
      "반복하고싶어 6\n",
      "반복하고싶어 7\n",
      "반복하고싶어 8\n",
      "반복하고싶어 9\n"
     ]
    }
   ],
   "source": [
    "for _ in range(10): #0~9 \n",
    "    print('반복하고싶어', _)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "34d585d6-90ca-4b15-8cb7-3394b8bdaab1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p\n",
      "y\n",
      "t\n",
      "h\n",
      "o\n",
      "n\n",
      "출력이 끝났습니다\n"
     ]
    }
   ],
   "source": [
    "for a in 'python':\n",
    "    print(a)\n",
    "else:\n",
    "    print('출력이 끝났습니다')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5bf43dd3-aaac-49c8-8d7f-aae0790cb6ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "number_sum = 0\n",
    "for i in 3, 4, 5, 6, 7:\n",
    "    number_sum += i\n",
    "else:\n",
    "    print(number_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b0943268-bd92-4be9-9f65-dff0a4b8ee05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "주문하세요: 아메리카노, 카페라테, 카푸치노: 아메리카노\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "아메리카노주문!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "주문하세요: 아메리카노, 카페라테, 카푸치노: 카페라테\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "카페라테주문!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "주문하세요: 아메리카노, 카페라테, 카푸치노: 카푸치노\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "카푸치노주문!\n",
      "3잔의 주문이 완료되었습니다\n"
     ]
    }
   ],
   "source": [
    "#132\n",
    "for i in range(3):\n",
    "    coffee = input('주문하세요: 아메리카노, 카페라테, 카푸치노:')\n",
    "    \n",
    "    \n",
    "    if coffee == '아메리카노':\n",
    "        print(f'{coffee}주문!')\n",
    "    elif coffee =='카페라테':\n",
    "        print(f'{coffee}주문!')\n",
    "    elif coffee== '카푸치노':\n",
    "        print(f'{coffee}주문!')\n",
    "    else : \n",
    "        print('잘못된 주문입니다')\n",
    "else:\n",
    "    print('3잔의 주문이 완료되었습니다')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c6678a49-b7f9-4a0f-89e9-3a170e23c14a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n",
      "반복하고싶어\n"
     ]
    }
   ],
   "source": [
    "cnt = 0\n",
    "\n",
    "while cnt < 10:\n",
    "    print('반복하고싶어')\n",
    "    cnt += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "864c92d7-0343-4447-b941-06a447d7e0a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2*1 =2 \n",
      "2*2 =4 \n",
      "2*3 =6 \n",
      "2*4 =8 \n",
      "2*5 =10 \n",
      "2*6 =12 \n",
      "2*7 =14 \n",
      "2*8 =16 \n",
      "2*9 =18 \n",
      "3*1 =3 \n",
      "3*2 =6 \n",
      "3*3 =9 \n",
      "3*4 =12 \n",
      "3*5 =15 \n",
      "3*6 =18 \n",
      "3*7 =21 \n",
      "3*8 =24 \n",
      "3*9 =27 \n",
      "4*1 =4 \n",
      "4*2 =8 \n",
      "4*3 =12 \n",
      "4*4 =16 \n",
      "4*5 =20 \n",
      "4*6 =24 \n",
      "4*7 =28 \n",
      "4*8 =32 \n",
      "4*9 =36 \n",
      "5*1 =5 \n",
      "5*2 =10 \n",
      "5*3 =15 \n",
      "5*4 =20 \n",
      "5*5 =25 \n",
      "5*6 =30 \n",
      "5*7 =35 \n",
      "5*8 =40 \n",
      "5*9 =45 \n",
      "6*1 =6 \n",
      "6*2 =12 \n",
      "6*3 =18 \n",
      "6*4 =24 \n",
      "6*5 =30 \n",
      "6*6 =36 \n",
      "6*7 =42 \n",
      "6*8 =48 \n",
      "6*9 =54 \n",
      "7*1 =7 \n",
      "7*2 =14 \n",
      "7*3 =21 \n",
      "7*4 =28 \n",
      "7*5 =35 \n",
      "7*6 =42 \n",
      "7*7 =49 \n",
      "7*8 =56 \n",
      "7*9 =63 \n",
      "8*1 =8 \n",
      "8*2 =16 \n",
      "8*3 =24 \n",
      "8*4 =32 \n",
      "8*5 =40 \n",
      "8*6 =48 \n",
      "8*7 =56 \n",
      "8*8 =64 \n",
      "8*9 =72 \n",
      "9*1 =9 \n",
      "9*2 =18 \n",
      "9*3 =27 \n",
      "9*4 =36 \n",
      "9*5 =45 \n",
      "9*6 =54 \n",
      "9*7 =63 \n",
      "9*8 =72 \n",
      "9*9 =81 \n"
     ]
    }
   ],
   "source": [
    "for i in range(2,10):\n",
    "    for j in range(1,10):\n",
    "        print(f'{i}*{j} ={i*j}', end = ' ')\n",
    "        \n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d4d46ae1-6d14-4531-a058-b597ad4dc402",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 2* 1 = 2 \n",
      " 2* 2 = 4 \n",
      " 2* 3 = 6 \n",
      " 2* 4 = 8 \n",
      " 2* 5 =10 \n",
      " 2* 6 =12 \n",
      " 2* 7 =14 \n",
      " 2* 8 =16 \n",
      " 2* 9 =18 \n",
      " 3* 1 = 3 \n",
      " 3* 2 = 6 \n",
      " 3* 3 = 9 \n",
      " 3* 4 =12 \n",
      " 3* 5 =15 \n",
      " 3* 6 =18 \n",
      " 3* 7 =21 \n",
      " 3* 8 =24 \n",
      " 3* 9 =27 \n",
      " 4* 1 = 4 \n",
      " 4* 2 = 8 \n",
      " 4* 3 =12 \n",
      " 4* 4 =16 \n",
      " 4* 5 =20 \n",
      " 4* 6 =24 \n",
      " 4* 7 =28 \n",
      " 4* 8 =32 \n",
      " 4* 9 =36 \n",
      " 5* 1 = 5 \n",
      " 5* 2 =10 \n",
      " 5* 3 =15 \n",
      " 5* 4 =20 \n",
      " 5* 5 =25 \n",
      " 5* 6 =30 \n",
      " 5* 7 =35 \n",
      " 5* 8 =40 \n",
      " 5* 9 =45 \n",
      " 6* 1 = 6 \n",
      " 6* 2 =12 \n",
      " 6* 3 =18 \n",
      " 6* 4 =24 \n",
      " 6* 5 =30 \n",
      " 6* 6 =36 \n",
      " 6* 7 =42 \n",
      " 6* 8 =48 \n",
      " 6* 9 =54 \n",
      " 7* 1 = 7 \n",
      " 7* 2 =14 \n",
      " 7* 3 =21 \n",
      " 7* 4 =28 \n",
      " 7* 5 =35 \n",
      " 7* 6 =42 \n",
      " 7* 7 =49 \n",
      " 7* 8 =56 \n",
      " 7* 9 =63 \n",
      " 8* 1 = 8 \n",
      " 8* 2 =16 \n",
      " 8* 3 =24 \n",
      " 8* 4 =32 \n",
      " 8* 5 =40 \n",
      " 8* 6 =48 \n",
      " 8* 7 =56 \n",
      " 8* 8 =64 \n",
      " 8* 9 =72 \n",
      " 9* 1 = 9 \n",
      " 9* 2 =18 \n",
      " 9* 3 =27 \n",
      " 9* 4 =36 \n",
      " 9* 5 =45 \n",
      " 9* 6 =54 \n",
      " 9* 7 =63 \n",
      " 9* 8 =72 \n",
      " 9* 9 =81 \n"
     ]
    }
   ],
   "source": [
    "for i in range(2,10):\n",
    "    for j in range(1,10):\n",
    "        print(f'{i:2d}*{j:2d} ={i*j:2d}', end = ' ')\n",
    "        \n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1cb3b040-86b7-4bdd-831a-ae7a4f9f63fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print(i)\n",
    "    if i ==6:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "edeb6b15-117f-4fe7-9f26-625ac8066cf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print(i)\n",
    "    if i ==6:\n",
    "        break\n",
    "else: \n",
    "    print('여기는 출력이 되지 않아요')\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f6b7d3a5-7a67-49c6-892d-816e49a1b011",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "여기는 출력이 되지 않아요\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print(i)\n",
    "    if i ==6:\n",
    "        continue\n",
    "else: \n",
    "    print('여기는 출력이 되지 않아요')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6515a280-ca69-4a5e-ae9d-be0391b5b17a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
